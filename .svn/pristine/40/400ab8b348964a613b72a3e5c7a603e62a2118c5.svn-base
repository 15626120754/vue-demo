<template>
  <div class="myNavMenu">
    <div class="inner">
      <el-row class="block-col-2">
        <el-col>
          <el-dropdown>
            <span class="el-dropdown-link">
              admin<i class="el-icon-arrow-down el-icon--right"></i>
            </span>
            <el-dropdown-menu slot="dropdown">
              <el-dropdown-item icon="el-icon-plus">黄金糕</el-dropdown-item>
              <el-dropdown-item icon="el-icon-circle-plus">狮子头</el-dropdown-item>
              <el-dropdown-item icon="el-icon-circle-plus-outline">螺蛳粉</el-dropdown-item>
              <el-dropdown-item icon="el-icon-check">双皮奶</el-dropdown-item>
              <el-dropdown-item icon="el-icon-circle-check">蚵仔煎</el-dropdown-item>
            </el-dropdown-menu>
          </el-dropdown>
        </el-col>
      </el-row>
    </div>
    <div>
      <el-tabs
        v-model="editableTabsValue"
        type="border-card"
        closable
        @tab-remove="removeTab"
        @tab-click="handleClickTab($event.name)"
      >
        <el-tab-pane
          :key="item.name"
          v-for="item in editableTabs"
          :label="item.name"
          :name="item.name"
        >
        </el-tab-pane>
      </el-tabs>
    </div>
  </div>
</template>

<script>
import { MENUS, HOME_INDEX } from '@/data/menusData.js';
export default {
  name: 'myNavMenu',
  data() {
    return {
      editableTabsValue: HOME_INDEX,
      editableTabs: [{
        title: 'Home',
        name: HOME_INDEX
      }],
      tabIndex: 1,
      openedTab: ['Home'],
      menus: MENUS
    }
  },
  methods: {
    handleClickTab (route) {
      this.$store.commit('changeTab', route);     
      for(var i = 0; i < this.menus.length; i++) {
        for(var j = 0; j < this.menus[i].sub.length; j++) {
          if(route == this.menus[i].sub[j].name) {
            this.$router.push(this.menus[i].sub[j].componentName)
          } else if(route == HOME_INDEX) {
            this.$router.push('/')
          }
        }
      }
      console.log(this.$route.path)
    },
    removeTab (targetName) {
      // 首页不允许被关闭（为了防止el-tabs栏中一个tab都没有）
      let tabs = this.editableTabs
      let activeName = this.editableTabsValue
      if (activeName === targetName) {
        tabs.forEach((tab, index) => {
          if (tab.name === targetName) {
            let nextTab = tabs[index + 1] || tabs[index - 1]
            if (nextTab) {
              activeName = nextTab.name
            }
          }
        })
      }
      this.$store.commit('deductTab', targetName)
      let deductIndex = this.openedTab.indexOf(targetName)
      this.openedTab.splice(deductIndex, 1)
      if(activeName == HOME_INDEX) {
        this.$router.push('/')
      }else {    
        this.$router.push(activeName)
      }
      this.editableTabsValue = activeName
      this.editableTabs = tabs.filter(tab => tab.name !== targetName)
      if (this.openedTab.length === 0) {
        this.$store.commit('addTab', HOME_INDEX)
        this.$router.push('/')
      }
    }
  },
  computed: {
    getOpenedTab () {
      return this.$store.state.openedTab
    },
    changeTab () {
      return this.$store.state.activeTab
    }
  },
  watch: {
    getOpenedTab (val) {
      if (val.length > this.openedTab.length) {
        // 添加了新的tab页
        let newTab = val[val.length - 1] // 新增的肯定在数组最后一个
        ++this.tabIndex
        this.editableTabs.push({
          title: newTab,
          name: newTab,
          content: ''
        })
        this.editableTabsValue = newTab
        this.openedTab.push(newTab)
      }
    },
    changeTab (val) {
      // 监听activetab以实现点击左侧栏时激活已存在的标签
      if (val !== this.editableTabsValue) {
        this.editableTabsValue = val
      }
    }
  },
  created () {
    // 将router回到index
    this.$router.push('/')
  }
}
</script>

<style scoped lang="scss">
  .myNavMenu {
    width: 100%;
    background: #fff;
    cursor: pointer;
    .el-dropdown-link {
      padding-right: 20px;
      box-sizing: border-box;
    }
    .inner {
      width: 100%;
      height: 50px;
      line-height: 50px;
      display: flex;
      justify-content: flex-end;
    }
  }
</style>
